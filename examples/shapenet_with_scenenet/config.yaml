# Args: <obj_file> <texture_file> <path_to_shape-net-core> <output_dir>
{
  "version": 3,
  "setup": {
    "blender_install_path": "/home/<env:USER>/blender/",
    # "pip": [
    #   "h5py"
    # ]
  },
  "modules": [
    {
      "module": "main.Initializer",
      "config":{
        "global": {
          "output_dir": "<args:3>"
        }
      }
    },
    {
      "module": "loader.ShapeNetMultiLoader",
      "config": {
        "data_path": "<args:2>",
        "used_synset_id": "02801938",
        "num_objects": 10,
        "add_properties": {
          "cp_shape_net_object": True,
          # set the custom property physics to True
          "cp_physics": True,
          # "cp_category_id": 10
        }
      }
    },

    ##### Beginning of the BOP positioning #####
    {
      "module": "constructor.BasicMeshInitializer",
      "config": {
        "meshes_to_add": [
        {
          "type": "plane",
          "name": "ground_plane0",
          "scale": [2, 2, 1]
        },
        {
          "type": "plane",
          "name": "ground_plane1",
          "scale": [2, 2, 1],
          "location": [0, -2, 2],
          "rotation": [-1.570796, 0, 0] # switch the sign to turn the normals to the outside
        },
        {
          "type": "plane",
          "name": "ground_plane2",
          "scale": [2, 2, 1],
          "location": [0, 2, 2],
          "rotation": [1.570796, 0, 0]
        },
        {
          "type": "plane",
          "name": "ground_plane4",
          "scale": [2, 2, 1],
          "location": [2, 0, 2],
          "rotation": [0, -1.570796, 0]
        },
        {
          "type": "plane",
          "name": "ground_plane5",
          "scale": [2, 2, 1],
          "location": [-2, 0, 2],
          "rotation": [0, 1.570796, 0]
        },
        {
          "type": "plane",
          "name": "light_plane",
          "location": [0, 0, 10],
          "scale": [3, 3, 1]
        }
        ]
      }
    },
    {
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "conditions": {
            "name": '.*plane.*'
          }
        },
        "cp_physics": False,
        "cp_category_id": 0
      }
    },
    {
      "module": "manipulators.MaterialManipulator",
      "config": {
        "selector": {
          "provider": "getter.Material",
          "conditions": {
            "name": "light_plane_material"
          }
        },
        "cf_switch_to_emission_shader": {
          "color": {
            "provider": "sampler.Color",
            "min": [0.5, 0.5, 0.5, 1.0],
            "max": [1.0, 1.0, 1.0, 1.0]
          },
          "strength": {
            "provider": "sampler.Value",
            "type": "float",
            "min": 3,
            "max": 6
          }
        }
      }
    },
    {
      "module": "loader.COCOMaterialLoader",
      "config": {
        "data_path": "<args:5>",
        "num_used": 20
      }
    },
    {
      "module": "loader.CCMaterialLoader",
      "config": {
        "folder_path": "<args:4>"
      }
    },
    {
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "conditions": {
            "name": "ground_plane.*"
          }
        },
        "mode": "once_for_all",
        "cf_randomize_materials": {
          "randomization_level": 1,
          "materials_to_replace_with": {
            "provider": "getter.Material",
            "random_samples": 1,
            "conditions": {
              "cp_is_cc_texture": True
            }
          }
        }
      }
    },
    # {
    #   "module": "manipulators.EntityManipulator",
    #   "config": {
    #     "selector": {
    #       "provider": "getter.Entity",
    #       "conditions": {
    #         "cp_shape_net_object": True
    #       }
    #     },
    #     "mode": "once_for_each",
    #     "cf_randomize_materials": {
    #       "randomization_level": 1,
    #       "materials_to_replace_with": {
    #         "provider": "getter.Material",
    #         "random_samples": 1,
    #         "conditions": {
    #           "cp_is_cc_texture": True
    #         }
    #       }
    #     }
    #   }
    # },
    {
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "conditions": {
            "cp_shape_net_object": True
          }
        },
        "mode": "once_for_each",
        "cf_randomize_materials": {
          "randomization_level": 1,
          "materials_to_replace_with": {
            "provider": "getter.Material",
            "random_samples": 1,
            "conditions": {
              "cp_is_coco_texture": True
            }
          }
        }
      }
    },
    {
      "module": "manipulators.EntityManipulator",
      "config": {
        "selector": {
          "provider": "getter.Entity",
          "conditions": {
            "cp_shape_net_object": True
          }
        },
        "cf_add_uv_mapping":{
          "projection": "sphere"
        },
      }
    },
    # {
    #   "module": "manipulators.MaterialManipulator",
    #   "config": {
    #     "selector": {
    #       "provider": "getter.Material",
    #       "conditions": {
    #         "name": "material*"
    #       }
    #     },
    #     "mode": "once_for_each",
    #     "cf_textures": {
    #       "Base Color": {
    #         "provider": "sampler.Path",
    #         "path": "<args:5>/*.jpg"
    #       }
    #     }
    #   }
    # },
    {
      "module": "object.ObjectPoseSampler",
      "config": {
        "objects_to_sample": {
          "provider": "getter.Entity",
          "conditions": {
            "cp_physics": True
          }
        },
        "pos_sampler": {
          "provider":"sampler.Uniform3d",
          "min": {
            "provider": "sampler.Uniform3d",
            "min": [-0.4, -0.4, 0.0],
            "max": [-0.3, -0.3, 0.0]
          },
          "max": {
            "provider": "sampler.Uniform3d",
            "min": [0.3, 0.3, 0.4],
            "max": [0.4, 0.4, 0.6]
          }
        },
        "rot_sampler":{
          "provider":"sampler.UniformSO3"
        }
      }
    },
    {
      "module": "object.PhysicsPositioning",
      "config": {
        "min_simulation_time": 3,
        "max_simulation_time": 10,
        "check_object_interval": 1,
        "solver_iters": 25,
        "substeps_per_frame": 20,
        "friction": 100.0,
        "linear_damping": 0.99,
        "angular_damping": 0.99,
        "objs_with_box_collision_shape": {
          "provider": "getter.Entity",
          "conditions": {
            "name": "ground_plane.*"
          }
        }
      }
    },
    ############## End of the BOP positioning 
    
    # {
    #   "module": "loader.SceneNetLoader",
    #   "config": {
    #     # after downloading the scenenet dataset it should be located inside of resources/scenenet/SceneNetData/
    #     "file_path": "<args:0>",
    #     "texture_folder": "<args:1>",
    #     "add_properties": {
    #       "cp_physics": False
    #     }
    #   }
    # },
    # {
    #   "module": "lighting.SceneNetLighting"
    # },
    # {
    #   "module": "manipulators.EntityManipulator",
    #   "config": {
    #     # get all shape net objects, as we have only loaded one this returns only one entity
    #     "selector": {
    #       "provider": "getter.Entity",
    #       "conditions": {
    #         "cp_shape_net_object": True,
    #         "type": "MESH"
    #       }
    #     },
    #     # Sets the location of this entity above a bed
    #     "location": {
    #       "provider": "sampler.UpperRegionSampler",
    #       "min_height": 0.1,
    #       "max_height": 0.5,
    #       "to_sample_on": {
    #           "provider": "getter.Entity",
    #           "conditions": {
    #             "cp_category_id": 4, # 4 is the category of the bed
    #             "type": "MESH"
    #           }
    #       }
    #     },
    #     # by adding a modifier we avoid that the objects falls through other objects during the physics simulation
    #     "cf_add_modifier": {
    #       "name": "Solidify",
    #       "thickness": 0.0025
    #     }
    #   }
    # },
    # {
    #   "module": "loader.CCMaterialLoader",
    #   "config": {
    #     "folder_path": "resources/cctextures"
    #   }
    # },
    # {
    #   "module": "manipulators.EntityManipulator",
    #   "config": {
    #     "selector": {
    #       "provider": "getter.Entity",
    #       "conditions": {
    #         # "name": "ground_plane.*"
    #         "cp_shape_net_object": True
    #       }
    #     },
    #     "mode": "once_for_all",
    #     "cf_randomize_materials": {
    #       "randomization_level": 1,
    #       "materials_to_replace_with": {
    #         "provider": "getter.Material",
    #         "random_samples": 1,
    #         "conditions": {
    #           "cp_is_cc_texture": True
    #         }
    #       }
    #     }
    #   }
    # },
    # {
    #   "module": "object.PhysicsPositioning",
    #   "config": {
    #     "min_simulation_time": 3,
    #     "max_simulation_time": 10,
    #     "check_object_interval": 1,
    #     "solver_iters": 25,
    #     "substeps_per_frame": 20,
    #     "friction": 100.0,
    #     "linear_damping": 0.99,
    #     "angular_damping": 0.99,
    #     # "solver_iters": 30,
    #     # "substeps_per_frame": 40,
    #     # "min_simulation_time": 0.5,
    #     # "max_simulation_time": 4,
    #     # "check_object_interval": 0.25,
    #     # "mass_scaling": True,
    #     # "mass_factor": 2000,
    #     "collision_margin": 0.001,
    #     "collision_shape": "MESH"
    #   }
    # },
    {
      "module": "camera.CameraSampler",
      "config": {
        "cam_poses": [
        {
          "number_of_samples": 5,
          "location": {
            "provider":"sampler.PartSphere",
            "center": {
              "provider": "getter.POI",
              "selector": {
                "provider": "getter.Entity",
                "conditions": {
                  "cp_shape_net_object": True,
                  "type": "MESH"
                }
              }
            },
            "distance_above_center": 0.3,
            "radius": 2,
            "mode": "SURFACE"
          },
          "rotation": {
            "format": "look_at",
            "value": {
              "provider": "getter.POI",
              "selector": {
                "provider": "getter.Entity",
                "conditions": {
                  "cp_shape_net_object": True,
                  "type": "MESH"
                }
              }
            }
          }
        }
        ]
      }
    },
    {
      "module": "renderer.RgbRenderer",
      "config": {
        "output_key": "colors",
        "samples": 150,
        "render_distance": True,
        "render_normals": True
      }
    },
    {
      "module": "manipulators.WorldManipulator",
      "config": {
        "cf_set_world_category_id": 0  # this sets the worlds background category id to 0
      }
    },
    {
      "module": "renderer.SegMapRenderer",
      "config": {
        "map_by": ["class", "instance"]
      }
    },
    {
      "module": "writer.Hdf5Writer",
      "config": {
        "postprocessing_modules": {
          "distance": [
          {
            "module": "postprocessing.TrimRedundantChannels",
          }
          ]
        }
      }
    }
  ]
}
